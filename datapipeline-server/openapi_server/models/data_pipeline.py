# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


import sys

from ruamel.yaml import YAML 


class DataPipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    pipeline_nodes = []
    host_names = []
    connection_names = []
    nodes_to_change = []
    _file = ""
    cntnt = {}


    # gets the list of nodes that has "radon.nodes.nifi.nifipipeline" "type" in it
    @classmethod

    def get_pipeline_nodes(self, node_types):
        for nodeName in self.cntnt["topology_template"]["node_templates"].keys():
            node = self.cntnt["topology_template"]["node_templates"][nodeName]
            if "type" in node.keys():
                if node["type"] in node_types:
                    self.pipeline_nodes.append(nodeName)



    # gets the list of host and connectToPipeline details
    @classmethod

    def get_host_connection_nodes(self):
        host_flag = 0
        for pipeline_node in self.pipeline_nodes:
            node = self.cntnt["topology_template"]["node_templates"][pipeline_node]["requirements"]
            for n in range(len(node)):
                for key, val in node[n].items():
                    if key == "host" and host_flag == 0:
                        self.host_names.append(val)
                        host_flag = 1
                    elif "connect" in key:
                        self.connection_names.append(val)
                        host_flag = 0
                    elif key == "host" and host_flag == 1:
                        self.connection_names.append('no')
                        self.host_names.append(val)
                        host_flag = 0


    # check the nodes and make a list of nodes where changes have to be done
    @classmethod
    def get_nodelist_to_edit(self):
        for connect in range(len(self.connection_names)):
            # print(pipeline_nodes[connect])
            if (self.connection_names[connect] != 'no'):
                connection = self.connection_names[connect]
                pipeline = self.pipeline_nodes.index(connection)
                connection_host = self.host_names[pipeline]
                node_host = self.host_names[connect]
                if (connection_host != node_host):
                    self.nodes_to_change.append(self.pipeline_nodes[connect])


    # defines the function to make changes in the file at required nodes
    @classmethod
    def make_changes(self):
        for nodes_change in self.nodes_to_change:
            node = self.cntnt["topology_template"]["node_templates"][nodes_change]
            if "requirements" in node.keys():
                for req in node["requirements"]:
                    if "connectToPipeline" in req:
                        req["connectToRemotePipeline"] = req["connectToPipeline"]
                        del req["connectToPipeline"]



    def __init__(self, file=None):  # noqa: E501
        """DataPipeline - a model defined in OpenAPI

        :param file: The file of this DataPipeline.  # noqa: E501
        :type file: file
        """
        self.openapi_types = {
            'file': file
        }

        self.attribute_map = {
            'file': 'file'
        }

        
        self.pipeline_nodes = []
        self.host_names = []
        self.connection_names = []
        self.nodes_to_change = []

        self._file = file

    @classmethod
    def from_dict(cls, dikt) -> 'DataPipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPipeline of this DataPipeline.  # noqa: E501
        :rtype: DataPipeline
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self):
        """Gets the file of this DataPipeline.


        :return: The file of this DataPipeline.
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DataPipeline.


        :param file: The file of this DataPipeline.
        :type file: file
        """

        self._file = file


    @classmethod
    def convert(self, filepath):

            node_types={
              "radon.nodes.nifi.nifipipeline",
              "radon.nodes.aws.s3bucket",
              "radon.nodes.aws.lambda"}
            self.pipeline_nodes = []
            self.host_names = []
            self.connection_names = []
            self.nodes_to_change = []


            #print("file", self.file, self._file)
            mydoc = open(filepath, "r")
            yaml = YAML(typ='safe')
            yaml.default_flow_style = False
            self.cntnt = yaml.load(mydoc)
            self.get_pipeline_nodes(node_types)
            self.get_host_connection_nodes()
            self.get_nodelist_to_edit()
            self.make_changes()

            #self.dump_yaml_file(self.cntnt, filepath)
            yaml_file = open(filepath, "w")
            yaml.dump(self.cntnt, yaml_file)
            yaml_file.close()

            mydoc.close()

